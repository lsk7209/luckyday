name: 럭키데이 CI/CD 파이프라인

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    # 수동 배포 트리거 (GitHub Actions UI에서 실행 가능)

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test -- --coverage --watchAll=false
      env:
        NODE_ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:3000

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nextjs-build
        path: out/
        retention-days: 7

  lighthouse:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: npx serve out -p 3000 &
      env:
        PORT: 3000

    - name: Wait for app to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

    - name: Run Lighthouse
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
          http://localhost:3000/dream
          http://localhost:3000/dream/baem-snake-dream
          http://localhost:3000/ai
        configPath: .lighthouserc.json
        uploadArtifacts: true
        temporaryPublicStorage: true

  deploy-preview:
    name: 프리뷰 배포
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, e2e]
    if: github.event_name == 'pull_request'

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 애플리케이션 빌드
      run: npm run build
      env:
        NODE_ENV: production

    - name: Cloudflare Pages 프리뷰 배포
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy out --project-name=luckyday --branch=preview-pr-${{ github.event.pull_request.number }}
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: PR 코멘트에 배포 URL 추가
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const previewUrl = `https://preview-pr-${prNumber}.luckyday.pages.dev`;
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 프리뷰 배포 완료!\n\n✅ 배포 URL: ${previewUrl}\n\n이 PR이 머지되면 자동으로 프로덕션에 배포됩니다.`
          });

  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build, e2e, lighthouse]
    # main 브랜치에 push하거나 workflow_dispatch로 수동 실행 시 배포
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기 (태그 포함)

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 애플리케이션 빌드
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://luckyday.pages.dev' }}

    - name: Cloudflare Pages 배포
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy out --project-name=luckyday
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: Supabase 마이그레이션 실행
      if: success()
      run: |
        echo "데이터베이스 마이그레이션 실행 중..."
        # Supabase 마이그레이션은 별도 환경에서 실행하거나 수동으로 실행
        # npm run db:migrate || echo "마이그레이션 스킵 (환경 변수 미설정)"
      env:
        SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      continue-on-error: true

    - name: 헬스 체크
      if: success()
      run: |
        echo "배포 후 헬스 체크 대기 중..."
        sleep 45
        SITE_URL="${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://luckyday.pages.dev' }}"
        echo "Checking: $SITE_URL"
        curl -f "$SITE_URL" || echo "⚠️ 헬스 체크 실패 (배포는 완료되었을 수 있음)"
      continue-on-error: true

    - name: 검색 엔진에 제출 (IndexNow)
      if: success()
      run: |
        SITE_URL="${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://luckyday.pages.dev' }}"
        echo "IndexNow에 사이트맵 제출 중..."
        if [ -n "${{ secrets.INDEXNOW_KEY }}" ]; then
          curl -X POST "https://api.indexnow.org/indexnow" \
            -H "Content-Type: application/json" \
            -d "{
              \"host\": \"$(echo $SITE_URL | sed 's|https\?://||' | sed 's|/.*||')\",
              \"key\": \"${{ secrets.INDEXNOW_KEY }}\",
              \"urlList\": [
                \"$SITE_URL\",
                \"$SITE_URL/dream\",
                \"$SITE_URL/ai\",
                \"$SITE_URL/dream/baem-snake-dream\"
              ]
            }" || echo "IndexNow 제출 실패 (계속 진행)"
        else
          echo "INDEXNOW_KEY가 설정되지 않아 스킵"
        fi
      continue-on-error: true

    - name: 배포 완료 알림
      if: success()
      run: |
        SITE_URL="${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://luckyday.pages.dev' }}"
        echo "🎉 럭키데이 배포 완료!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ Frontend: $SITE_URL"
        echo "✅ 꿈 사전: $SITE_URL/dream"
        echo "✅ AI 해몽: $SITE_URL/ai"
        echo "✅ 관리자: $SITE_URL/admin"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📊 배포 정보:"
        echo "   - 브랜치: ${{ github.ref }}"
        echo "   - 커밋: ${{ github.sha }}"
        echo "   - 실행자: ${{ github.actor }}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      env:
        NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://luckyday.pages.dev' }}
